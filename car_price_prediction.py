# -*- coding: utf-8 -*-
"""car price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ljvtmu_IayAwnwv7BkDJtzAdu7cuKuYY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import xgboost as xgb
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics
from sklearn.metrics import accuracy_score

carprice_dataset = pd.read_csv('/content/drive/MyDrive/ML datasets/Car Price Prediction/car data.csv')
carprice_dataset.head()

carprice_dataset.shape

print(carprice_dataset['Fuel_Type'].value_counts())
print(carprice_dataset['Seller_Type'].value_counts())
print(carprice_dataset['Transmission'].value_counts())

carprice_dataset.info()

carprice_dataset.isnull().sum()

"""Encoding the categorical data"""

#converting the text datas to numerical values
carprice_dataset.replace({'Fuel_Type':{'Petrol':0, 'Diesel':1, 'CNG':2},
                          'Seller_Type':{'Dealer':0, 'Individual':1},
                          'Transmission':{'Manual':0, 'Automatic':1}}, inplace = True)

carprice_dataset.head()

x = carprice_dataset.drop(['Car_Name', 'Selling_Price'], axis = 1)
y = carprice_dataset['Selling_Price']

print(x.shape)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.1, random_state=2)

"""Model Training: Linear Regression"""

lin_reg_model = LinearRegression()

lin_reg_model.fit(x_train, y_train)

x_train_prediction = lin_reg_model.predict(x_train)

#accuracy using R2 score
accuracy = metrics.r2_score(y_train, x_train_prediction)
print(accuracy)

# Here the error score should be as low as possible. This value of r2 error is a bit different from the accuracy score we din in case of the classification model.
# This result is different in dfferent problems and it is hard to tell which r2 score value is better. So, we need to plot and see the values. (Regression plot)

#accuracy using accuracy_score

# accuracy2 = accuracy_score(x_train, y_train)
# print(accuracy2)

#Sooo it doesn't work. I see! because accuracy_score determines the accuracy of the classification. Here, in case of regression we need to use R2 score.

"""Visualizing the actual prices and predicted prices"""

x_train.shape

#this is for training data
plt.scatter(y_train, x_train_prediction)
plt.xlabel('Actual price')
plt.ylabel('Predicted Price')
plt.show()

#here we can see that the dots are very close. that means, the values of our predicted price and the actual price are pretty close

#Now for test data
x_test_prediction = lin_reg_model.predict(x_test)

accuracy = metrics.r2_score(y_test, x_test_prediction)
print(accuracy)

#now visualizing the data in a scatter plot
plt.scatter(y_test, x_test_prediction)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.show()

# Here we can see that the dots are almost in the same line. So it is a good model.

"""Now Lasso Regression model.

Lasso reg works better most of the cases. Lasso regression or xg boost reg works best where there are multiple fearues and multiple columns.

Linear regression works best on positive correlated values where the columns are positively correlated.
"""

lasso_reg_model = Lasso()

lasso_reg_model.fit(x_train, y_train)

x_train_prediction = lasso_reg_model.predict(x_train)

#accuracy using R2 score
accuracy = metrics.r2_score(y_train, x_train_prediction)
print(accuracy)

# Here the error score should be as low as possible. This value of r2 error is a bit different from the accuracy score we din in case of the classification model.
# This result is different in dfferent problems and it is hard to tell which r2 score value is better. So, we need to plot and see the values. (Regression plot)

#accuracy using accuracy_score

# accuracy2 = accuracy_score(x_train, y_train)
# print(accuracy2)

#Sooo it doesn't work. I see! because accuracy_score determines the accuracy of the classification. Here, in case of regression we need to use R2 score.

"""Visualizing the actual prices and predicted prices"""

#this is for training data
plt.scatter(y_train, x_train_prediction)
plt.xlabel('Actual price')
plt.ylabel('Predicted Price')
plt.show()

#here we can see that the dots are very close. that means, the values of our predicted price and the actual price are pretty close

#Now for test data
x_test_prediction = lasso_reg_model.predict(x_test)

accuracy = metrics.r2_score(y_test, x_test_prediction)
print(accuracy)

#now visualizing the data in a scatter plot
plt.scatter(y_test, x_test_prediction)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.show()

# Here we can see that the dots are almost in the same line. So it is a good model.

"""Now XG Boost"""

xgb_reg_model = xgb.XGBRegressor()

xgb_reg_model.fit(x_train, y_train)

x_train_prediction = xgb_reg_model.predict(x_train)

#accuracy using R2 score
accuracy = metrics.r2_score(y_train, x_train_prediction)
print(accuracy)

# Here the error score should be as low as possible. This value of r2 error is a bit different from the accuracy score we din in case of the classification model.
# This result is different in dfferent problems and it is hard to tell which r2 score value is better. So, we need to plot and see the values. (Regression plot)

#accuracy using accuracy_score

# accuracy2 = accuracy_score(x_train, y_train)
# print(accuracy2)

#Sooo it doesn't work. I see! because accuracy_score determines the accuracy of the classification. Here, in case of regression we need to use R2 score.

"""Visualizing the actual prices and predicted prices"""

#this is for training data
plt.scatter(y_train, x_train_prediction)
plt.xlabel('Actual price')
plt.ylabel('Predicted Price')
plt.show()

#here we can see that the dots are very close. that means, the values of our predicted price and the actual price are pretty close

#Now for test data
x_test_prediction = xgb_reg_model.predict(x_test)

accuracy = metrics.r2_score(y_test, x_test_prediction)
print(accuracy)

#now visualizing the data in a scatter plot
plt.scatter(y_test, x_test_prediction)
plt.xlabel('actual price')
plt.ylabel('predicted price')
plt.show()

# Here we can see that the dots are almost in the same line. So it is a good model.

